[
  "HVPO_SWDD_VehicleMode_0001\n\nTsk_Run_VehicleModeManagement_Tasks\n\nDescription\n\nRuns the vehicle mode management tasks\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nVehicle mode management tasks will be ran\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_Run_VehicleModeManagement_Tasks\n\nRef{STLADT2KW-1227}",
  "HVPO_SWDD_VehicleMode_0002\n\n\n\nTsk_Run_AnalogDataManagement_Tasks\n\nDescription\n\nRuns the analog data management tasks\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nAnalog data management tasks will be ran\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_Run_AnalogDataManagement_Tasks\n\nRef{PFE-49 }",
  "HVPO_SWDD_VehicleMode_0003\n\n\n\nTsk_RunMCUSubSystems_Tasks\n\nDescription\n\nRuns the Sub system tasks manager and driver\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nSub system manager and driver tasks run\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_RunMCUSubSystems_Tasks\n\nRef{STLADT2KW-370, STLADT2KW-1227}\n\n\n\nTsk_PowerPathAndThermal_Tasks\n\nDescription\n\nCalls the tasks for state monitors sensor filters manager drivers related to powerpath and thermal\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nFunctions for tasks will be called and their tasks should be carried out\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_PowerPathAndThermal_Tasks\n\nTsk_LightingManagement_Tasks\n\nDescription\n\nCalls the functions for tasks relating to lighting, including managers monitors handlers and controls\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nFunctions should be called that do tasks related to lighting\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_LightingManagement_Tasks\n\nTsk_Run_VehicleModeMonitor_Tasks\n\nDescription\n\nCalls the Tsk_VehicleModeMonitor function\n\nParameter 1\n\nvoid\n\nReturn Value\n\nvoid\n\nPrecondition\n\nnone\n\nPost condition\n\nTsk_VehicleModeMonitor should be ran\n\nError Conditions\n\nNone\n\nTable 9 – Tsk_Run_VehicleModeMonitor_Tasks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<Add a Function Activity diagrama sequence diagram or a state Machine diagram according to the need to better explain the function’s algorithm >\n\n\n\n\n\nMacros\n\nNone\n\nGeneral Data description\n\n<Description of data which is produced and used by this SW ComponentModule global Variables – Data which exists globally, but only for use inside this SW Module Incl. Variables, Constants, for local useGlobal shared Data are described in the required or provided SW interface depending to the owner of a variable.>\n\n2.4.1 EEPROM DATA\n\nEEPROM DATA blocks\n\nData Block Name\n\nSize [Byte]\n\nRAM mirror\n\n[Yes/ No]\n\nWrite cycles\n\nCheck-\n\nsum\n\n[YES/NO]\n\nNo. of Multi-blocks\n\nVariable / Structure name\n\nDefinition location [Filename]\n\nType\n\nLength\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\nTable 10- EEPROM DATA\n\n2.4.2 Constants\n\nName\n\nData Type\n\nDataRange\n\nDefault Value\n\nDescription\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\n(…)\n\nTable 11- Constants\n\n2.4.3 SW component's Global variables\n\nName\n\nType\n\nMemory section\n\nDescription\n\nShared\n\n<Inverter_OnOff_Command>\n\n<e_Inverter_OnOff_Command>\n\n<RAM>\n\n<Inverter ON/OFF command\n\nINVERTER_ONOFF_COMMAND_OFF=0\n\nINVERTER_ONOFF_COMMAND_ON=1>\n\n<Check shared Variable’s description>\n\nTable 12- Global variables\n\n<Shared Variables description>\n\nUpdate mechanism\n\nMeaning\n\nSpecial attention\n\n0\n\nBackground task level (only available in high power)\n\nMay have high or low priority!\n\n1\n\nTask level M (Only available in high power, for SW-platform M is equal to FG1)\n\nCheck which task priorities are defined in this project\n\n2\n\nTask level N (Only available in high power, for SW-platform N is equal to FG2)\n\nCheck which task priorities are defined in this project\n\nL\n\nUsed in low power\n\n\n\nH\n\nUsed in high power\n\n\n\nA\n\nService provided to other SW-components\n\nAn external service might be in use everywhere and on any priority level\n\nP\n\nService provided to other SW-subcomponents which belong to this SW-component design\n\nAn external service might be in use everywhere and on any priority level\n\nS\n\nInitialized at Init task (IT is allowed)\n\n\n\nD\n\nInit in startup hook (IT are disabled)\n\n\n\nA\n\nAtomic access (not interruptible, not good for reusability)\n\nDepending to the µC and compiler!\n\nP\n\nProtected from interruption or/and tasks preemption\n\n\n\nNP\n\nProtection not needed\n\n\n\nTable 13 - Shared variables description\n\n\n\n2.5 Design decisions and reasoning\n\n2.5.1 Alternatives\n\n<Brief description of possible alternatives and why a specific design solution was chosen. Possible improvements>\n\nDesign solutions for general features\n\n<This chapter is optional.It should describe detailed design solutions for general features of our products.>\n\n2.6.1 Power management handling\n\n<Details which are not provided by the SW Architecture description>\n\n2.6.2 Diagnosis interaction\n\n2.6.3 Error Handling\n\nError description\n\nReaction\n\n(…)\n\n(…)\n\nTable 14 - Error Handling\n\nMajor events\n\nMajor events\n\nReaction\n\nCold reset\n\n\n\nWarm reset\n\n\n\nSleep/wake-up\n\n\n\nIgnition ON/OFF\n\n\n\nCranking\n\n\n\nOver/Under voltage\n\n\n\nShorting pin\n\n\n\nCommunication disconnection\n\n\n\nCold reset\n\n\n\nWarm reset\n\n\n\nSleep/wake-up\n\n\n\nIgnition ON/OFF\n\n\n\nTable 15- Major Events\n\nPropagation delay – worst case computation\n\n<Performance data about the SW componentList functions which are called in a task and provide following information:Worst case execution time, with short description of the worst-case scenario, and how the value has been deduced (measured/estimated/calculated etc.)Max. time spent in protected section, i.e. between SuspendAllInterrupts() and ResumeAllInterrupts() or EnterProtectedSection() and LeaveProtectedSection().  Max. Stack consumption (measured/estimated/calculated) Integration Manual>\n\nSW Component integration\n\n2.8.1 Integration context / constraints\n\n2.8.2 Include files\n\n<List of included files>\n\n#include\"VehicleMode.h\"\n\n#include\"COS_TaskList_Handler.h\"\n\n\n\n#include\"WDT_HAL.h\"\n\n\n\n#include\"Analog_Data_Manager.h\"\n\n#include\"Battery_Driver.h\"\n\n#include\"Battery_Driver_Interface.h\"\n\n#include\"Battery_Sensor.h\"\n\n#include\"Qswitch_Sensor.h\"\n\n#include\"Boost_Sensor.h\"\n\n#include\"Ref2p5_Sensor.h\"\n\n#include\"Temperature_Sensor.h\"\n\n#include\"Qswitch_Driver.h\"\n\n#include\"Qswitch_Driver_Interface.h\"\n\n#include\"Boost_Driver.h\"\n\n#include\"Boost_Driver_Interface.h\"\n\n\n\n#include\"Light_Activity_Monitor.h\"\n\n#include\"Light_Control.h\"\n\n#include\"Light_Control_Interface.h\"\n\n#include\"Light_Request_Handler.h\"\n\n#include\"Light_Retry_ability_Manager.h\"\n\n#include\"Light_Short_Circuit_Monitor.h\"\n\n#include\"Trailer_Present_Monitor.h\"\n\n#include\"TurnLight_Activity_Monitor.h\"\n\n\n\n#include\"Light_Output_Driver.h\"\n\n#include\"Light_Sense_Monitor.h\"\n\n#include\"VehicleRequestMonitor.h\"\n\n#include\"Wakeup_Event_Handler.h\"\n\n\n\n#include\"SubSystemDriver.h\"\n\n#include\"SubSystemManager.h\"\n\n\n\n#include\"VehicleModeManager.h\"\n\n#include\"VehicleModeMonitor.h\"\n\n\n\n#include\"PowerPath_FaultEvent_Monitor.h\"\n\n#include\"PowerPath_Interface.h\"\n\n#include\"PowerPathDriverDispatcher.h\"\n\n#include\"PowerPathMonitor.h\"\n\n#include\"PowerPathSequenceManager.h\"\n\n#include\"PowerPathSequenceMonitor.h\"\n\n\n\n#include\"Boost_State_Monitor.h\"\n\n#include\"Battery_State_Monitor.h\"\n\n#include\"Aux5V_State_Monitor.h\"\n\n#include\"Qswitch_State_Monitor.h\"\n\n#include\"Light_Load_Monitor.h\"\n\n#include\"Temperature_State_Monitor.h\"\n\n\n\n#include\"SFR_Refresh.h\"\n\n\n\n2.8.3 Initialization\n\n<All function bellow shall be called on initialization>\n\nCall Order\n\nService\n\nCall constraints linked to another module\n\n\n\n\n\n\n\n\n\nTable 16 - Init Functions\n\n2.8.4 Interrupts\n\n<If described in the SW Architecture Document, just put the reference here>\n\n2.8.5 Real time scheduler task\n\n<Add scheduler tasks>\n\nName\n\nService\n\nTask level\n\n\n\n<Function name>\n\n<called by Task name>\n\nTable 17- Scheduler Tasks\n\n2.8.6 Other entry points\n\nName\n\nService\n\nTask level\n\n\n\n<Function name>\n\n<called by Task name>\n\nTable 18 - Other Entry Tasks\n\n2.8.7 Power mode transition job\n\nCall order\n\nTransition\n\nService\n\nCall constraints linked to another module\n\n\n\n<Power transitionMode>\n\n<Function name>\n\n<called by Task name>\n\nTable 19 - Power mode Transition services\n\n2.8.8 SW Component configuration\n\n<Default Value = Value which is used when EEPROM is corrupt or after init when EEPROM is empty\n\nMem Type\n\nMeaning\n\nStat ROM\n\nConfiguration item which can be changed statically, i.e. re-building the software\n\nStat. Flash ROM\n\nConfiguration item which can be changed statically, i.e. flashing ROM partially\n\nDyn\n\nConfiguration item which can be changed dynamically, e.g. by diagnosis\n\n>\n\nName\n\nMem Type\n\nData Type\n\nData Range\n\nDefault Value\n\nDescription\n\n(…)\n\n\n\n(…)\n\n\n\n(…)\n\n\n\n(…)\n\n\n\n(…)\n\n\n\n(…)\n\n\n\nTable 20- Component configurations\n\n\n\n2.8.9 Interface mechanisms\n\n\n\nSee chapter \n\n\n\n2.8.10 SW Platform or Basic SW configuration\n\n<This tables list all resources needed and provided by the SW component in its environment. If the SWP is used, these data will be entered in the XML file that describes this VFB component, using the configuration tool provided by the SW Platform.>\n\nTIMER\n\nFast Timer\n\nName\n\nNotification Function\n\n<Timer Name>\n\n<Callback of the Timer when it’s elapsed>\n\nSlow Timer\n\nName\n\nResolution\n\nNotification Function\n\n<Timer Name>\n\n<Timer resolution>\n\n<Callback of the Timer when it’s elapsed>\n\nTable 21 - List of Timers\n\nCONTROLLED RAM\n\nLargest Data Byte Size\n\nInitialization Callback Function\n\n<Data size>\n\n<Callback Function Name>\n\nTable 22- Controlled RAM"
]