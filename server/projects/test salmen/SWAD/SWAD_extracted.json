[
  "HVPO_SWAD_Primary_0001\n\nThe LIN component is the bridge between the primary software and the LIN libraries.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nLIN_Driver_CommRx\n\nLIN data reading from the buffers and process the LIN frame\n\nvoid\n\nvoid\n\nLIN_Driver_Service\n\nRun the Driver operations and commanding the inverter operation\n\nvoid\n\nvoid\n\nLIN_Init\n\nInitialize LIN module\n\nvoid\n\nvoid\n\nLIN_InverterEnable\n\nDo aggregated signals from LIN allow inverter to be enabled?\n\nvoid\n\nuint16_t (true/false)\n\nLIN_SetFault\n\nSet fault over LIN. Sends internal fault, LIN library decides how to display fault.\n\nfault ID (uint8_t), fault category ID (uint8_t)\n\nvoid\n\nLIN_SetLidStatus\n\nSet lid status over LIN.\n\nstatus (1 or 0, uint16_t)\n\nvoid\n\nLIN_GetOutputPowerLimit\n\nGet output power limit communicated over LIN.\n\nvoid\n\nLIN output power limit in watts x10\n\nLIN_GetBootReqStatus\n\nGet boot request status\n\nvoid\n\nBoot request stats flag (uint8_t)\n\nLIN_SetACOutputActive\n\nNotify LIN of AC output active (1) or inactive (0)\n\nuint16_t active\n\nvoid\n\nRef:{STLADT2KW-370, STLADT2KW-1227}",
  "HVPO_SWAD_Primary_0002\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nSet_Sec_ProgramMemChecksum\n\n\n\nuint32_t received_checksum\n\nvoid\n\nCRC_CCITT_Calc\n\n\n\nvoid\n\nbool\n\n\n\n\n\n\n\n\n\nRef:{PFE-49 }\n\n\n\nNVM Manager Component\n\nComponent Diagram\n\nThe NVM Manager handles the Non-volatile memory including manager the fault record. The NVM Manager is the sole accessor of the EEPROM module read and write functions. The NVM Manager provides API for the fault record to be updated and saved to EEPROM.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nNVM_Init\n\nInit NVM Manager\n\nvoid\n\nvoid\n\nNVM_SaveRecord\n\nWrite fault record to EEPROM and ignition cycles if ignOff is true\n\nbool ignOff\n\nvoid\n\nNVM_GetFaultRecordData\n\nGet fault record data\n\nuint16_t fault buffer index, uint8_t length, uint8_t *response buffer\n\nvoid\n\nNVM_GetRecentFaultRecords\n\nGet most recent faults list\n\nuint8_t length, uint8_t *response buffer\n\nvoid\n\nNVM_UpdateFaultLifetime\n\nUpdate lifetime count of fault in fault record\n\nFault_e id\n\nvoid\n\nNVM_UpdateCountUpFault\n\nIncrease count up/down value for fault id in fault record by specified amount\n\nFault_e id, uint16_t countUpIncr\n\nvoid\n\nNVM_UpdateCountDownFault\n\nDecrease count up/down value for fault id in fault record by specified amount\n\nFault_e id, uint16_t countDownIncr\n\nvoid\n\nNVM_UpdateMostRecentList\n\nAdd fault to most recent faults list in fault record\n\nFault_e currentFault\n\nvoid\n\nNVM_UpdateMostRecentIgnCycles\n\nUpdate most recent fault list ignition cycles since occurrence count\n\nvoid\n\nvoid\n\n\n\nEEPROM Component\n\nComponent Diagram\n\nThe EEPROM module handles the read and write functionality to the EEPROM chip via I2C2.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nEEPROM_Write\n\nWrite to EEPROM\n\nuint8_t *(dataToWrite), \n\nuint16_t dataLen, uint16_t address\n\nvoid\n\nEEPROM_Read\n\nRead from EEPROM\n\nuint8_t *(placeForReadData), uint16_t dataLen, uint16_t address\n\nvoid\n\nEEPROM_Init\n\nInitialize EEPROM Module\n\nvoid\n\nvoid\n\n\n\nSignals Component\n\nComponent Diagram\n\nThe Signals component contains interfaces for the rest of the system to access signals. The Signals component makes signals from the ADC Driver available in either ADC counts or relevant units and scale. It also contains interfaces related to the hardware build configuration ID as well as any flags in the hardware build configuration.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nSig_InitHwBuildID\n\nRead voltage influenced by hardware build resistor. Determine hardware build ID from voltage level. Initialize hardware build ID variables.\n\nvoid\n\nvoid\n\nSig_HasFeatureRCD\n\nDoes this hardware build have the RCD feature?\n\nvoid\n\nbool\n\nSig_HasFeatureAuxOutlet\n\nDoes this hardware build have the Aux Outlet feature?\n\nvoid\n\nbool\n\nSig_HasFeatureDiagLidSwitch\n\nDoes this hardware build have the diagnostic lid switch feature?\n\nvoid\n\nbool\n\nSig_ValidHwBuildConfig\n\nDoes the hardware build ID represent a valid configuration?\n\nvoid\n\nbool\n\nSig_AdcFiltered\n\nReturns filtered ADC value for specified channel\n\nADC channel (uint8_t)\n\nuint16_t\n\nSig_AdcRaw\n\nReturns the unfiltered ADC value for specified channel\n\nADC channel (uint8_t)\n\nuint16_t\n\nSig_VBAT_Raw\n\nReturns only hardware filtered Vbat in volts x 100\n\nvoid\n\nuint16_t\n\nSig_VBAT_MovAvg\n\nReturns moving average filtered (4 place) Vbat in volts x100\n\nvoid\n\nuint16_t\n\nSig_VBAT_WindowAvg\n\nReturns window average filtered (25 place) Vbat in volts x100\n\nvoid\n\nuint16_t\n\nSig_VBAT_PROTECTED_Raw\n\nReturns only hardware filtered Vbat protected in volts x 100\n\nvoid\n\nuint16_t\n\nSig_VBAT_PROTECTED_MovAvg\n\nReturns moving average filtered (4 place) Vbat protected in volts x 100\n\nvoid\n\nuint16_t\n\nSig_VBAT_PROTECTED_WindowAvg\n\nReturns window average filtered (25 place) Vbat protected in volts x 100\n\nvoid\n\nuint16_t\n\nSig_VLOGIC\n\nReturns software filtered Vlogic in volts x 100\n\nvoid\n\nuint16_t\n\nSig_VIGN\n\nReturns hardware filtered Vign in volts x 100\n\nvoid\n\nuint16_t\n\nSig_RAIL_5V8\n\nReturns software filtered 5.8V rail in volts x 100\n\nvoid\n\nuint16_t\n\nSig_ISO_MON\n\nReturns software filtered isolation monitor in volts x 100\n\nvoid\n\nuint16_t\n\nSig_HW_BUILD_V\n\nReturns software filtered hardware build voltage in volts x100\n\nvoid\n\nuint16_t\n\nSig_OUTPUT_ENABLE_ADC\n\nReturns software filtered output enable ADC value\n\nvoid\n\nuint16_t\n\nSig_ScaledOutputEnableADC\n\nReturns output enable ADC value scaled by Vbat\n\nvoid\n\nuint16_t\n\nSig_NTC_RECTIFIER\n\nReturns software filtered NTC RECTIFIER value in degrees Celsius x 100\n\nvoid\n\nuint16_t\n\nSig_NTC_DCDC\n\nReturns software filtered NTC DCDC value in degrees Celsius x 100\n\nvoid\n\nuint16_t\n\nSig_NTC_AMBIENT\n\nReturns software filtered NTC AMBIENT value in degrees Celsius x 100\n\nvoid\n\nuint16_t\n\nSig_NTC_INPUT_FET\n\nReturns software filtered NTC input FET value in degrees Celsius x 100\n\nvoid\n\nuint16_t\n\nSig_FanInputV\n\nReturns fan input voltage in volts x100\n\nvoid\n\nuint16_t\n\nSig_KeepAliveEnable\n\nEnable Keep Alive\n\nvoid\n\nvoid\n\nSig_KeepAliveDisable\n\nDisable Keep Alive\n\nvoid\n\nvoid\n\nSig_CutoffDownstreamPower\n\nDisables Main Input, Fan Enable, and Secondary Power\n\nvoid\n\nvoid\n\nSig_MainInputEnable\n\nEnable Main Input\n\nvoid\n\nvoid\n\nSig_MainInputDisable\n\nDisable Main Input\n\nvoid\n\nvoid\n\nSig_FanPowerEnable\n\nEnable Fan Power\n\nvoid\n\nvoid\n\nSig_FanPowerDisable\n\nDisable Fan Power\n\nvoid\n\nvoid\n\nSig_IsFanPowerEnabled\n\nIs fan power enabled?\n\nvoid\n\nuint16_t\n\nSig_SecPowerEnable\n\nEnable power to secondary board\n\nvoid\n\nvoid\n\nSig_SecPowerDisable\n\nDisable power to secondary\n\nvoid\n\nvoid\n\nSig_LinEnable\n\nEnable LIN\n\nvoid\n\nvoid\n\nSig_LinDisable\n\nDisable LIN\n\nvoid\n\nvoid\n\nSig_DCLinkV_FastFilter\n\nReturns DCLink voltage in voltsx10,\n\nWith filter size 4\n\nvoid\n\nuint16_t\n\nSig_DCLinkV_SlowFilter\n\nReturns DCLink voltage in voltsx10, with filter size 128\n\nvoid\n\nuint16_t\n\nSig_AcRmsV\n\nReturns AC output RMS voltage in voltsx10\n\nvoid\n\nuint16_t\n\nSig_AcRmsA\n\nReturns AC output RMS current in ampsx10\n\nvoid\n\nuint16_t\n\nSig_Power\n\nReturns AC output RMS Power in wattsx10\n\nvoid\n\nuint16_t\n\nSig_AuxOutletA\n\nReturns auxiliary outlet RMS current in ampsx10\n\nvoid\n\nuint16_t\n\nSig_AuxOutletPeakOC\n\nReturns auxiliary outlet peak overcurrent flag\n\nvoid\n\nuint16_t\n\nSig_AdcBridgeTemp\n\nReturns bridge Temp value sent from secondary in ADC counts\n\nvoid\n\nuint16_t\n\nSig_BridgeTemp\n\nReturns bridge temp value sent from secondary in degrees Celsius x100\n\nvoid\n\nuint16_t\n\nSig_RCD\n\nReturns RCD voltage in voltsx100\n\nvoid\n\nuint16_t\n\nSig_UpdateSecSignals\n\nUpdate secondary signals with information from secondary signal response packet\n\npointer to secondary response status packet struct\n\nvoid\n\nSig_ClearSecSignals\n\nClear secondary signals saved on primary\n\nvoid\n\nvoid\n\nSig_OUTPUT_ENABLE\n\nReturn output enable (1 or 0)\n\nvoid\n\nuint16_t\n\nSig_PriRuntimeShortFlag\n\nReturns primary runtime short circuit flag\n\nvoid\n\nuint16_t\n\nSig_VdsOvervoltFlag\n\nReturns Vds overvolt flag\n\nvoid\n\nuint16_t\n\nSig_InputCurrentEst\n\nReturns input current estimate in amps\n\nvoid\n\nuint16_t\n\nSig_IgnResVDrop\n\nReturns Ignition resistor voltage drop in volts x 100\n\nvoid\n\nuint16_t\n\nSig_HwBuildID\n\nReturns hardware build ID\n\nvoid\n\nuint16_t\n\nADC Driver Component\n\nComponent Diagram\n\nThe ADC Driver component supplies information from the ADC channels to the Signals component. All active ADC channels are sampled every 1ms. Signals utilizing a moving average filter get a new value every 1ms, stored with optional extra resolution.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nAdc_SetWindowAvgSize\n\nSet size of window average (must be synchronized with AC output frequency)\n\nuint8_t channel\n\nuint16_t\n\nAdc_GetQ12\n\nGet filtered Q12 ADC channel value\n\nuint8_t channel\n\nuint16_t\n\nAdc_GetRaw\n\nGet unfiltered ADC channel value\n\nuint8_t channel\n\nuint16_t\n\nAdc_WindowAvg\n\nReturn window average for specified channel\n\nuint8_t channel\n\nuint16_t\n\nAdc_GetAvgExtraRes\n\nReturn filtered ADC value including extra resolution\n\nuint8_t channel\n\nuint16_t\n\nAdc_EngUnitShift\n\nReturn bit resolution of ADC (12-bit) plus extra resolution\n\nuint8_t channel\n\nuint8_t\n\n\n\nFan Component\n\nComponent Diagram\n\nWhile the Cooling Manager component handles the application specific logic for cooling, the Fan module is responsible for controlling each fan to the commands of the Cooling Manager. The Fan component utilizes a PID controller to control the speed of each fan to a target. The current speed of the fan is calculated from the tachometer signals.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nFan_Init\n\nInitialize fan module including instances for each fan, stuck fan parameters, and the control update interval\n\nFanStuckParams_t *stuck, uint16_t interval\n\nvoid\n\nFan_SetTargetSpeed\n\nSet target speed for specified fan\n\nfan ID, uint16_t target speed\n\nvoid\n\nFan_GetCurrentSpeed\n\nGet current speed of specified fan\n\nfan ID\n\nuint16_t current speed\n\nFan_SaturatedHigh\n\nReturn true/false for if specified fan is saturated at the maximum duty cycle\n\nfan ID\n\nuint16_t (true/false)\n\nFan_Stuck\n\nReturn true/false if fan is determined to be stuck\n\nfan ID\n\nbool\n\nFan_ControlSpeed\n\nControl fans to target speed\n\nfan ID, uint16_t input voltage\n\nvoid\n\nFan_Enable\n\nEnable fan PWMs\n\nfan ID\n\nvoid\n\nFan_Disable\n\nDisable fan PWMs\n\nfan ID\n\nvoid\n\n\n\nTach Component\n\nComponent Diagram\n\nThe Tach component is responsible for using the tach capture information and interpreting it in terms of fan speed.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nTach_Initialize\n\nInitialize tach module with parameters from the fan module\n\nTach_t *tach, TachParams_t *params, uint8_t id\n\nvoid\n\nTach_GetCurrentSpeed\n\nCalculate current fan speed for this tach instance based on time between tach captures. Returns speed in RPMs\n\nTach_t *tach\n\nuint16_t\n\nTach_Reset\n\nInitiates a Tach Capture clearing of the capture variables\n\nTach_t *tach\n\nvoid\n\n\n\nTach Capture Component\n\nComponent Diagram\n\nThe Tach Capture component is responsible for interfacing with the capture compare peripherals and making information from them available to the Tach component.\n\n\n\nProvided Interface Details\n\nInterface Name\n\nDescription\n\nParameters\n\nReturns\n\nTachCapture_Init\n\nInitialize Tach Capture module\n\nuint8_t id\n\nvoid\n\nTachCapture_GetCurrCap\n\nReturn current capture reading\n\nuint8_t id\n\nuint32_t\n\nTachCapture_GetPrevCap\n\nReturn previous capture reading\n\nuint8_t id\n\nuint32_t\n\nTachCapture_HasNewCapture\n\nReturn true if there has been a new tach capture since last processing of reading\n\nuint8_t id\n\nbool\n\nTachCapture_NotifyProcessed\n\nNotify the Tach Capture module the reading has been processed, setting the “new capture” flag to false\n\nuint8_t id\n\nvoid\n\nTachCapture_Reset\n\nClear capture readings\n\nuint8_t id\n\nvoid\n\n\n\nPlatform Architecture\n\nHardware and Software interaction\n\n<Show the picture and details of Hardware and software interactions/interfaces of each component>\n\nMicrocontroller pin functionality allocation\n\nPeripherals\n\nModule\n\nChannels\n\nPurpose \n\nComments\n\nADC1\n\n1-25\n\nRead Signals\n\n\n\nCMP1\n\n\n\nComparator tripped indicates Primary Runtime Short Event\n\ncomparator output directly fed into PWM module (PG2 Fault PCI)\n\nCMP2\n\n\n\nComparator tripped indicates Vds overvolt event\n\ncomparator output directly fed into PWM module (PG2 CL PCI)\n\nTMR1\n\n\n\nRTOS tick interrupt handler\n\n\n\nI2C2\n\n\n\nCommunication with EEPROM chip\n\n\n\nMCCP9\n\n\n\nUsed as a 1ms timer interrupt to kick off round robin ADC sampling of the channels\n\n\n\nOPA1\n\n\n\nProvide low source impedance to the ADC (used as a signal buffer)\n\n\n\nPIN_MGR\n\n\n\nSet up GPIO\n\n\n\nPWM\n\nPG2\n\nControls first phase of DCDC\n\nPCI inputs for primary runtime short and Vds overvolt\n\nPWM\n\nPG3\n\nControls second phase of DCDC\n\nbypass enable for PCI actions\n\nPWM\n\nPG4\n\nControls third phase of DCDC\n\nbypass enable for PCI actions\n\nPWM\n\nPG5\n\nControls fan 1 speed\n\n\n\nPWM\n\nPG7\n\nControls fan 2 speed\n\n\n\nSCCP1\n\n\n\nTach capture for fan 1\n\n\n\nSCCP2\n\n\n\nTach capture for fan 2\n\n\n\nSCCP3\n\n\n\nUsed as 1ms Timer interrupt\n\nB2b send message to secondary\n\nSCCP4\n\n\n\nUsed as 1ms Timer interrupt\n\nInterrupt deferred processing for DCDC Task\n\nSCCP5\n\n\n\nUsed as 1ms Timer interrupt\n\nInterrupt deferred processing for Monitor Task\n\nSCCP6\n\n\n\nUsed as 1ms Timer interrupt\n\nInterrupt deferred processing for LIN Task\n\nUART1\n\n\n\nLIN Communication\n\n\n\nUART2\n\n\n\nB2b Communication\n\n\n\n\n\nClocks selections\n\nSL No\n\nClock Base\n\nScalar \n\nClock Source\n\nClock Type\n\nFrequency\n\n1\n\nXOSC (8MHZ)\n\nx12\n\nPLL0\n\nPHI\n\n192 MHz\n\n2\n\nPHI\n\n÷3\n\nLIN_CLK\n\nUART Clock (CUT 2)\n\n64 MHz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecommended I/O Pin Function Allocation\n\n\n\nInterrupts\n\nIRQ No.\n\nVector Number\n\nISR Name\n\nPriority Level\n\nDetails\n\n1\n\n9\n\n_T1Interrupt\n\n1\n\nRTOS tick handler\n\n6\n\n14\n\n_CCP1Interrupt\n\n1\n\nTach Capture for Fan 1\n\n11\n\n19\n\n_U1RXInterrupt\n\n1\n\nLIN Rx byte\n\n23\n\n31\n\n_CCP2Interrupt\n\n1\n\nTach Capture for Fan 2\n\n27\n\n35\n\n_U2RXInterrupt\n\n1\n\nB2b Rx byte\n\n28\n\n36\n\n_U2TXInterrupt\n\n1\n\nB2b Tx byte\n\n36\n\n44\n\n_CCT3Interrupt\n\n1\n\nB2b initiate send packet\n\n38\n\n46\n\n_MI2C2Interrupt\n\n1\n\nEEPROM read/write\n\n41\n\n49\n\n_CCT4Interrupt\n\n1\n\nInterrupt deferred DCDC Task\n\n44\n\n52\n\n_CCT5Interrupt\n\n1\n\nInterrupt deferred Monitor Task\n\n47\n\n55\n\n_CCT6Interrupt\n\n1\n\nInterrupt deferred LIN Task\n\n68\n\n76\n\n_PWM2Interrupt\n\n2\n\nDCDC spread spectrum update\n\n91\n\n99\n\n_ADCAN0Interrupt\n\n1\n\nADC channel 0 conversion complete\n\n93\n\n101\n\n_ADCAN2Interrupt\n\n1\n\nADC channel 2 conversion complete\n\n95\n\n103\n\n_ADCAN4Interrupt\n\n1\n\nADC channel 4 conversion complete\n\n96\n\n104\n\n_ADCAN5Interrupt\n\n1\n\nADC channel 5 conversion complete\n\n97\n\n105\n\n_ADCAN6Interrupt\n\n1\n\nADC channel 6 conversion complete\n\n102\n\n110\n\n_ADCAN11Interrupt\n\n1\n\nADC channel 11 conversion complete\n\n103\n\n111\n\n_ADCAN12Interrupt\n\n1\n\nADC channel 12 conversion complete\n\n105\n\n113\n\n_ADCAN14Interrupt\n\n1\n\nADC channel 14 conversion complete\n\n106\n\n114\n\n_ADCAN15Interrupt\n\n1\n\nADC channel 15 conversion complete\n\n107\n\n115\n\n_ADCAN16Interrupt\n\n1\n\nADC channel 16 conversion complete\n\n108\n\n116\n\n_ADCAN17Interrupt\n\n1\n\nADC channel 17 conversion complete\n\n109\n\n117\n\n_ADCAN18Interrupt\n\n1\n\nADC channel 18 conversion complete\n\n110\n\n118\n\n_ADCAN19Interrupt\n\n1\n\nADC channel 19 conversion complete\n\n182\n\n190\n\n_CCT9Interrupt\n\n1\n\nKick off sampling ADC channels round robin\n\n\n\n\n\n\n\nResource usage\n\nTask Management\n\nSl. No\n\nTask Name\n\nPeriodicity (ms)\n\nPriority\n\n\n\nLIN Communication\n\n\n\n1\n\n\n\nLIN Driver Service\n\n\n\n1\n\n\n\nStartup Task\n\n\n\n2\n\n\n\nShutdown Task\n\n\n\n2\n\n\n\nFault Task\n\n\n\n2\n\n\n\nCooling Task\n\n256ms\n\n3\n\n\n\nB2b Receive Task\n\n1ms\n\n4\n\n\n\nMonitor Task\n\n1ms\n\n4\n\n\n\nDCDC Task\n\n1ms\n\n4\n\n\n\nState Machine Task\n\n\n\n5\n\n\n\n\n\nMemory Management\n\n<Specify all partitions of memory (Boot, Application, reserved, etc.,) and segments of partition (.text, .rodata, .usercode,  etc.,)>\n\nSl. No\n\nMemory partition type\n\nMemory segment \n\nMemory range\n\nSize (bytes)\n\nPurpose \n\n\n\nBootloader\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgram(.text)\n\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n\n\n\n\n\n\n\nApplication\n\n\n\n\n\n\n\n\n\n\n\n\n\nProgram(.text)\n\n\n\n\n\n\n\n\n\n\n\ndata\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeneral Information of Development\n\n\n\nIDE details\n\nMPLAB X IDE v6.05, DFP: dsPIC33CK-MP_DFP v1.6.176\n\nCompiler details\n\nXC16 v1.70\n\nProject setup\n\n<Provide the details of boot/app/calibration project structures >\n\n\n\nApplication configuration details\n\nThe following C macros are defined in project properties.\n\nMacro\n\nPurpose\n\nLITTLE_ENDIAN\n\nUsed for parsing B2b messages correctly\n\nFULL_BUILD\n\nFull build indicates a fully populated set of boards. Non full build would indicate partially populated boards without power components used for development.\n\n__PRIMARY__\n\n\n\nBUILD_CA\n\nBuild is specified because BUILD_BA requires GPIO configuration change and a change in handling output enable.\n\n__bootloadable__\n\n\n\n\n\nThe hardware build configuration is specified in a file called hwBuildConfig.h in the same directory level as the primary project. The hardware build configuration header file should contain the following definitions.\n\nMacro\n\nValue\n\nPurpose\n\nModule\n\nHBX_BUILD_ID\n\n1\n\nStellantis 12V 2kW 120V is hardware build ID 1\n\nSignals\n\nHBX_AUX_OUTLET_CURR_MAX\n\n3.6\n\nAuxiliary Outlet RMS Current Max in amps\n\n*Only applicable on units where HBX_FEATURE_AUX_OUTLET = 1\n\nMonitor\n\nHBX_BURST_MODE_THRES\n\n300\n\nDC-Link voltage at which DCDC enters burst mode\n\nDCDC\n\nHBX_BURST_RECOVERY_THRES\n\n290\n\nDC-Link voltage at which DCDC exits burst mode\n\nDCDC\n\nHBX_DCDC_BOOST_RATIO_MAX\n\n23\n\nUsed to calculate max in DC-Link voltage plausibility range\n\nMonitor\n\nHBX_DCDC_BOOST_RATIO_MIN\n\n16\n\nUsed to calculate min in DC-Link voltage plausibility range\n\nMonitor\n\nHBX_DCDC_TABLE_PERIOD_0\n\n27\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nSCSC\n\nHBX_DCDC_TABLE_PERIOD_1\n\n27\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_PERIOD_2\n\n4\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_PERIOD_3\n\n4\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_PERIOD_4\n\n6\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_PERIOD_5\n\n6\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_0\n\n0\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_1\n\n100\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_2\n\n150\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_3\n\n235\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_4\n\n290\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCDC_TABLE_VOLTAGE_5\n\n350\n\nDefines DCDC PWM period vs. DC-Link voltage interpolation table\n\nDCDC\n\nHBX_DCLINK_LEAKDOWN_INITIAL_MIN\n\n10\n\nDefines initial minimum DC-Link voltage used in high voltage and low voltage DC-Link Leakdown tests\n\nMonitor\n\nHBX_DCLINK_MAX\n\n330\n\nDefines DC-Link voltage threshold for DC-Link overvoltage fault\n\nMonitor\n\nHBX_DCLINK_MIN\n\n150\n\nDefines DC-Link voltage threshold for DC-Link undervoltage fault\n\nMonitor\n\nHBX_DCLINK_PLAUS_MAX\n\n300\n\nDefines maximum bound the calculated upper DC-Link plausibility can be\n\nMonitor\n\nHBX_DCLINK_STAB_RANGE\n\n3\n\nDefines maximum difference between one DC-Link voltage value to the next when monitoring for DC-Link voltage stability\n\nMonitor\n\nHBX_FAN_OFF_MODE_HYST_WINDOW\n\n50\n\nDefines hysteresis in RPMs for turn on/turn off thresholds when cooling manager power vs speed interpolation table has the fans off in the first speed position.\n\nCooling Manager\n\nHBX_FAN_TABLE_POWER_0\n\n0\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_POWER_1\n\n200\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_POWER_2\n\n300\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_POWER_3\n\n400\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_POWER_4\n\n1400\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_SPEED_0\n\n1000\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_SPEED_1\n\n1000\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_SPEED_2\n\n1000\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_SPEED_3\n\n1000\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FAN_TABLE_SPEED_4\n\n5400\n\nDefines Cooling Manager power vs. speed interpolation table\n\nCooling Manager\n\nHBX_FEATURE_AUX_OUTLET\n\n0\n\nDefines whether hardware has auxiliary outlet capability\n\nSignals\n\nHBX_FEATURE_DIAG_LID_SWITCH\n\n1\n\nDefines whether hardware has diagnostic lid switch\n\nSignals\n\nHBX_FEATURE_RCD\n\n0\n\nDefines whether hardware has RCD functionality\n\nSignals\n\nHBX_HV_DCLINK_LEAKDOWN_MAX\n\n10\n\nDefines maximum allowable DC-Link voltage Leakdown during DC-Link high voltage Leakdown test\n\nMonitor\n\nHBX_INPUT_CURR_EST_MAX\n\n170\n\nDefines maximum input current\n\nMonitor\n\nHBX_LIMP_POWER_LIMIT\n\n400\n\nDefines power maximum during Limp mode\n\nMonitor\n\nHBX_LV_DCLINK_LEAKDOWN_MAX\n\n3\n\nDefines maximum allowable DC-Link voltage Leakdown during DC-Link low voltage Leakdown test\n\nMonitor\n\nHBX_NOM_OUTPUT_VOLTAGE\n\n120\n\nNominal output voltage\n\nMonitor\n\nHBX_POWER_LIMIT\n\n2000\n\nPower Limit\n\nMonitor\n\nHBX_RMSV_MAX\n\n130\n\nMaximum AC RMS voltage\n\nMonitor\n\nHBX_RMSV_MIN\n\n108\n\nMinimum AC RMS voltage\n\nMonitor\n\nHBX_SYSTEM_EFFICIENCY\n\n0.9\n\nSystem efficiency used in input current estimate calculation\n\nSignals\n\nHBX_TURNS_RATIO\n\n9\n\n*Unused\n\nMonitor\n\nHBX_VBAT_MAX_THRES\n\n16.1\n\nMaximum threshold used to determine battery overvoltage\n\nMonitor\n\nHBX_VBAT_MIN_THRES\n\n10.9\n\nMinimum threshold used to determine battery undervoltage\n\nMonitor\n\nHBX_VBAT_STARTUP_MAX_THRES\n\n15.1\n\nMaximum threshold used to determine if battery voltage is in range to startup DCDC\n\nMonitor\n\nHBX_VBAT_STARTUP_MIN_THRES\n\n11.9\n\nMinimum threshold used to determine if battery voltage is in range to startup DCDC\n\nMonitor\n\nHBX_WINDOW_AVG_SIZE\n\n25\n\nWindow average size, represents first integer multiple in ms (three half cycles)\n\nSignals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocument Change History\n\nThe following is the document control for revisions to this document.\n\nVersion\n\nDescription\n\nAuthor(s)\n\nRevision Date\n\nApproved By (Title)\n\nApproved By (Name)\n\nApproved Date\n\n0.00 or A\n\nInitial Version\n\nHassan Arghavani\n\nExp: 27Apr21\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3- Document Change History"
]